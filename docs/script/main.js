class M{static async get(n){try{return await(await fetch(`${n}.json`)).json()}catch{return null}}}class r{static element(n,h,u=document.body){const v=document.createElement(n);return v.className=h,u.appendChild(v),v}}class i{static errorDOM;static errorDOMTitle;static errorDOMMessage;static errorDOMIcon;static tabDOM;static tabDOMTitle;static tabList;static tabActive;static error(n,h,u){this.errorDOMTitle.innerHTML=n,this.errorDOMMessage.innerHTML=h,this.errorDOMIcon.src=`icons/${u}.svg`,this.status("open")}static status(n){this.errorDOM.setAttribute("status",n)}static{this.errorDOM=r.element("div","error-container"),this.errorDOMIcon=r.element("img","error-icon",this.errorDOM),this.errorDOMTitle=r.element("div","error-title",this.errorDOM),this.errorDOMMessage=r.element("div","error-message",this.errorDOM),this.status("close"),this.tabDOM=r.element("div","tab-list"),this.tabDOMTitle=r.element("h1","tab-title",this.tabDOM),this.tabDOMTitle.textContent="Accounting"}}class c{DOM;active(){if(this.DOM.setAttribute("status","active"),i.tabActive)i.tabActive.deactive();i.tabActive=this}deactive(){this.DOM.setAttribute("status","deactive")}constructor(n){this.DOM=r.element("div","tab",i.tabDOM),this.DOM.textContent=n,this.DOM.addEventListener("click",this.active.bind(this))}}class o{static async init(){const n=await M.get("components");if(!n||n.length==0)i.error("Extention","I can't find extentions !",0);n.forEach((h)=>{new c(h)})}}o.init();
